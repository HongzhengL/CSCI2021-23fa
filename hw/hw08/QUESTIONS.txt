                           _________________

                            HW 8 QUESTIONS
                           _________________

Write your answers to the questions below directly in this text file to
prepare for the associated quiz.


Important: Run on csel-kh1262-xx
================================

  The provided code that you will analyze is meant to demonstrate some
  interesting aspects of hardware. Different hardware will give different
  results. To make sure your results are consistent with the
  expectations *run your code on csel-kh1262-xx.cselabs.umn.edu*
  machines. These machines are numbered `csel-kh1262-01' to
  `csel-kh1262-28'.  You can log in using
  ,----
  | > ssh kolb0128@csel-kh1262-07.cselabs.umn.edu
  `----

  or something similar, using your own x500 and adjusting the final number from
  07 to any number 01 to 28.

  Use your X.500 username/password to get access. All CSE labs machines
  share the same home directory so any code you download to Vole or a
  physical lab machine will be available on all machines.

  Importantly, expect INCONSISTENT RESULTS in the following environments
  - VOLE: this is a virtualized environment, not real hardware. Results
    are likely to vary from one run to the next
  - Personal machines: hardware will vary for you on your own
    machine. Results may be faster, slower, consistent with those above
    or very different. It is may be interesting to compare the results
    on your own machine to those on the test machines.


Compiling and Timing
====================

  Use the provided Makefile to compile as in
  ,----
  | > make
  | gcc -Wall -g -Og -c superscalar_main.c
  | gcc -Wall -g -Og -c superscalar_funcs.c
  | gcc -Wall -g -Og -o superscalar_main superscalar_main.o superscalar_funcs.o
  `----
  The compilation uses `-Og' (debug level optimization) which is
  necessary to stop the compiler from modifying some loops.

  This will produce the `superscalar_main' program which has the
  following usage:
  ,----
  | > ./superscalar_main
  | usage: ./superscalar_main <MULT> <EXP> <ALG>
  |   <MULT> and <ALG> are integers, iterates for MULT * 2^{EXP} iterations
  |   <ALG> is one of
  |          add1_diff : add 1 times in loop
  |          add2_diff : add 2 times in same loop; different destinations
  |          add3_diff : add 3 times in same loop; different destinations
  |          add2_same : add 2 times in same loop; same destinations
  |          mul1_diff : multiply 1 times in loop
  |          mul2_diff : multiply 2 times in same loop; different destinations
  |          mul3_diff : multiply 3 times in same loop; different destinations
  |          mul4_diff : multiply 4 times in same loop; different destinations
  |          mul2_same : multiply 2 times in same loop; same destinations
  | add1_then_mul_diff : add and multiply in different loops; different destinations
  | add1_then_mul_same : add and multiply in different loops; same destinations
  |  add2_and_mul_diff : add twice and multiply in the same loop; different destinations
  |  add2_and_mul_same : add twice and multiply in the same loop; same destination
  `----

  Experiment with the algorithm `add1_diff' and parameters `MULT' and `EXP'
  which control the number of iterations run. Experiment until you get a
  run time of about 1 second such as MULT=1 and EXP=32 on kh-1262-01.
  ,----
  | kh-1262-01> time ./superscalar_main 1 32 add1_diff
  | add1_diff for 18 * 2^{27} = 2415919104 iterations... complete
  |
  | real    0m1.010s
  | user    0m1.009s
  | sys     0m0.000s
  `----


PROBLEM 1: Addition
===================

(A) add1_diff / add2_diff / add3_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code in `superscalar_funcs.c' for the following
  algorithms.
  - add1_diff : add 1 times in loop
  - add2_diff : add 2 times in same loop; different destinations
  - add3_diff : add 3 times in same loop; different destinations
  Note that each does some additions in a loop. Time each of these WITH
  THE SAME MULT/EXP parameters and show your timings. Describe how the
  timings compare and speculate on why.

  Note that all of these involve incrementing a counter (`i++') so the
  number of additions is one greater than the algorithm name suggests.


(B) add2_diff / add2_same
~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the source code of the two algorithms below.
  - add1_diff : add 1 times in loop
  - add2_diff : add 2 times in same loop; different destinations
  - add2_same : add 2 times in same loop; same destinations
  Note that the only difference between the add2_X algorithms is
  the destination for the results.

  Compare timings for these and speculate on the reasons for any
  unexpected results.


PROBLEM 2: Multiplication
=========================

(A) add1_diff / mul1_diff
~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_diff : add 1 times in loop
  - mul1_diff : multiply 1 times in loop
  Time them on the same parameters and speculate on the timing
  differences.


(B) mul1_diff / mul2_diff / mul3_diff / mul4_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - mul1_diff : multiply 1 times in loop
  - mul2_diff : multiply 2 times in same loop; different destinations
  - mul3_diff : multiply 3 times in same loop; different destinations
  - mul4_diff : multiply 4 times in same loop; different destinations
  Time them on the same parameters and speculate on the timing
  differences.


(C) mul1_diff / mul2_diff / mul2_same
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following three algorithms.
  - mul1_diff : multiply 1 times in loop
  - mul2_diff : multiply 2 times in same loop; different destinations
  - mul2_same : multiply 2 times in same loop; same destinations
  Time them on the same parameters and speculate on the timing
  differences.


PROBLEM 3: Combined Addition/Multiplication
===========================================

(A) add1_then_mul_diff / add2_and_mul_diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compare the following two algorithms.
  - add1_then_mul_diff : add and multiply in different loops; different
    destinations
  - add2_and_mul_diff : add twice and multiply in the same loop;
    different destinations
  Note that each loop involves incrementing a counter so both of the
  above algorithms should do the same number of operations for N
  iterations:
  ------------------------------------------------
                       loop        total  overall
   Algorithm           incr  adds  adds   total
  ------------------------------------------------
   add1_then_mul_diff  2*N   1*N   3*N    4*N
   add2_and_mul_diff   1*N   2*N   3*N    4*N
  ------------------------------------------------

  Time these algorithms on the same parameters and speculate on the
  timing differences.

  Compare the timings to your earlier results for add1_diff and
  mul1_diff.


(B) Table of Timings
~~~~~~~~~~~~~~~~~~~~

  Consider the table of algorithm variants given below.  Part A of this
  question compared two of these algorithms. Add their times into the
  table below under the 'User Time' column then time the other two
  algorithms to complete the table of timings. The table will be
  analyzed in the next part.

  ---------------------------------------------
           Memory                         User
   #Loops  Locations  Algorithm           Time
  ---------------------------------------------
        2  Different  add1_then_mul_diff
        1  Different  add2_and_mul_diff
        2  Same       add1_then_mul_same
        1  Same       add2_and_mul_same
  ---------------------------------------------


(C) Table Analysis
~~~~~~~~~~~~~~~~~~

  Explain why the following observations can be made about the timing
  table from part B.

   Alg1                vs  Alg2                Reason
  ----------------------------------------------------
   add1_then_mul_diff  <    add1_then_mul_same  ??
   add2_and_mul_diff   <    add2_and_mul_same   ??
   add1_then_mul_diff  >    add2_and_mul_diff   ??
   add1_then_mul_same  <=   add2_and_mul_same   ??
