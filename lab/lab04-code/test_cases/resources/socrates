#! /usr/bin/env python3
# A utility for checking answers in text-based quiz files
# Author: John Kolb <jhkolb@umn.edu>
# SPDX-License-Identifier: GPL-3.0-or-later
# Version 0.2.0

import argparse
import hashlib
import json
import os.path
import sys

ACCEPTABLE_PREFIXES = [
    "- ( )",
    "- (X)",
    "( )",
    "(X)",
]

# Extract text representing quiz answers from a file
# Returns a list of "answer batches" - each batch is for one quiz question
# Each batch is a list of strings - the answer options for that question
def extractQuizAnswers(file_name):
    with open(file_name) as f:
        file_lines = [ line.strip() for line in f ]

    answer_batches = []
    current_batch = []
    in_batch = False
    current_answer = ""

    for line in file_lines:
        # We hit an empty line while in a batch -- marks end of that batch
        if len(line) == 0 and in_batch:
            in_batch = False
            current_batch.append(current_answer)
            current_answer = ""
            answer_batches.append(current_batch)
            current_batch = []

        # We hit the start of a new answer
        elif any([ line.startswith(prefix) for prefix in ACCEPTABLE_PREFIXES ]):
            # This is the start of a new answer batch
            if not in_batch:
                in_batch = True
                current_answer = line

            # Wrap up previous answer in batch
            else:
                current_batch.append(current_answer)
                current_answer = line

        # This is part of a multi-line answer
        elif in_batch:
            current_answer += ("\n" + line)

        # Otherwise, line is ignored

    # We could hit end of file while still accumulating last batch
    if in_batch:
        current_batch.append(current_answer)
        answer_batches.append(current_batch)

    return answer_batches


# For each answer batch, compute a hash of the marked answer(s)
# Answers are considered marked if they contain the substring '(X)'
# If a batch has no answers marked, the empty string is used as its hash
def hashQuizAnswers(answer_batches):
    hashes = []
    for batch in answer_batches:
        marked_answers = [ answer for answer in batch if '(X)' in answer ]
        if len(marked_answers) == 0:
            hashes.append("")
        else:
            # More than one answer may reasonably have been marked
            answer_bytes = "\n".join(marked_answers).encode("utf-8")
            hashes.append(hashlib.sha256(answer_bytes).hexdigest())
    return hashes


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Check Quiz Answers")
    parser.add_argument("quiz_file")
    parser.add_argument("-g", "--generate")
    parser.add_argument("-c", "--check")
    parser.add_argument("-i", "--individual", action='store_true')
    parser.add_argument("-a", "--aggregate", action='store_true')
    arguments = parser.parse_args()

    quiz_file = arguments.quiz_file
    generate_target = arguments.generate
    check_target = arguments.check

    if generate_target is None and check_target is None:
        print("Error: Must request either checksum generation or checksum verification operations")
        sys.exit(0)
    elif generate_target is not None and check_target is not None:
        print("Error: Must request either checksum generation or checksum verification operations")
        sys.exit(0)
    elif not os.path.isfile(quiz_file):
        print("Error: Specified quiz file does not exist or is not a proper file")
        sys.exit(0)

    if arguments.individual and arguments.aggregate:
        print("Error: Must enable either individual or aggregate answer checking")
        sys.exit(0)
    elif not arguments.individual and not arguments.aggregate:
        print("Error: Must enable either individual or aggregate answer checking")
        sys.exit(0)

    answer_batches = extractQuizAnswers(quiz_file)
    answer_hashes = hashQuizAnswers(answer_batches)
    if arguments.aggregate:
        # Compute just one hash to check correctness of all answers together
        answer_hashes_bytes = "".join(answer_hashes).encode("utf-8")
        aggregate_answer_hash = hashlib.sha256(answer_hashes_bytes).hexdigest()

    if generate_target:
        with open(generate_target, "w") as f:
            if arguments.aggregate:
                json.dump(aggregate_answer_hash, f)
            else:
                json.dump(answer_hashes, f)

    # We must be checking against existing checksum file
    else:
        if not os.path.isfile(check_target):
            print("Error: Specified checksum file does not exist or is not a proper file")
            sys.exit(0)
        with open(check_target) as f:
            expected_hashes = json.load(f)

        if arguments.individual:
            if not type(expected_hashes) is list:
                print("Error: Checksum file does not support individual answer checking")
                sys.exit(0)
            if len(expected_hashes) != len(answer_hashes):
                print("Error: Number of answers extracted from quiz does not match expected quantity.")
                print("If your QUESTIONS.txt file is corrupted, restore it from the provided backup")
                sys.exit(0)

            for i in range(len(expected_hashes)):
                actual_hash = answer_hashes[i]
                expected_hash = expected_hashes[i]

                if len(actual_hash) == 0:
                    print(f"Question {i+1}: Not Answered")
                elif actual_hash == expected_hash:
                    print(f"Question {i+1}: Correct")
                else:
                    print(f"Question {i+1}: Incorrect")
        else:
            if not type(expected_hashes) is str:
                print("Error: Checksum file does not support aggregate answer checking")
                sys.exit(0)
            if expected_hashes != aggregate_answer_hash:
                print("One or more quiz answers are incorrect.")
            else:
                print("All quiz answers correct.")
