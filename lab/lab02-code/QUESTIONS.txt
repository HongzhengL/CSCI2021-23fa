                           __________________

                            LAB 02 QUESTIONS
                           __________________

Lab Instructions
================

  Follow the instructions below to experiment with topics related to
  this lab.
  - For sections marked QUIZ, fill in an (X) for the appropriate
    response in this file. Use the command `make test-quiz' to see if
    all of your answers are correct.
  - For sections marked CODE, complete the code indicated. Use the
    command `make test-code' to check if your code is complete.
  - DO NOT CHANGE any parts of this file except the QUIZ sections as it
    may interfere with the tests otherwise.
  - If your `QUESTIONS.txt' file seems corrupted, restore it by copying
    over the `QUESTIONS.txt.bk' backup file.
  - When you complete the exercises, check your answers with `make test'
    and if all is well, create a zip file with `make zip' and upload it
    to Gradescope. Ensure that the Autograder there reflects your local
    results.
  - IF YOU WORK IN A GROUP only one member needs to submit and then add
    the names of their group.


Linked List Application
=======================

QUIZ Build Commands
~~~~~~~~~~~~~~~~~~~

  After downloading and unzipping the lab code, TAs will demonstrate how
  to compile the `list_main' application using a provided `Makefile' and
  the command `make'. They will demonstrate how to run several other
  useful commands via `make'. These are as follows:

  To remove all the compiled files (executable programs and `.o' files),
  use `make' as follows:
  - ( ) make sanitize
  - ( ) make clean
  - ( ) make remove
  - ( ) make gc

  To run ALL the automated tests for the code through the given
  `Makefile' use the following command:
  - ( ) make test
  - ( ) make verify
  - ( ) make examine
  - ( ) make unit
  Note: the default is to run all tests and you may need to specify WHAT
  to test, like a quiz, code, or an individual problem.

  To run only test #2 (the first of the code tests), one should use the
  following `make' command:
  - ( ) make test2
  - ( ) make test 2
  - ( ) make unit test=2
  - ( ) make test testnum=2

  If I change code and want to see if any more tests pass after the
  change, I should type
  - ( ) `make' to rebuild followed by `make test' to run tests
  - ( ) `make clean' followed by `make' followed by `make test'
  - ( ) `make test' will rebuild based on changes AND then run tests
  - ( ) ALL of these will work but `make test' is the shortest and sweetest.

  Since compiling C programs involving several files is a bit painful,
  we will provide a `Makefile' on all of the course projects and the
  conventions outlined here will be followed to make life easier.
  Importantly, **passing automated tests will be part of project
  grades** so make sure you know how to run the tests.


CODE for Linked List Application
================================

  This lab's code pack contains an application featuring a linked list. The
  code is divided into an interactive `main()' function in `list_main.c' and a
  number of supporting files. You are encouraged to *study this program
  carefully* because
  - It demonstrates MANY common and useful techniques in C
  - You will need to use these techniques in an upcoming project

  The `list_main' program has several problems that must be corrected to
  complete it.

  1. The built in `get' command produces some errors. This will require
     editing the associated C function in `list_funcs.c' to correct it.
  2. The `contains' command is not implemented, which will require adding
     a function to `list_funcs.c' and adding that command to
     `list_main.c'.
  3. The `list_insert()' function has a problem with its return value
     which causes `main()' to report incorrect results for it.

  The objective is to fix the code so all the related tests pass:
  ,----
  | > make test-code
  | == list_main
  | == Running 4/4 tests
  | Test 1) list_main: Print then Exit: Passed
  | Test 2) list_main: Insert 3 and Print: Passed
  | Test 3) Get Command: Passed
  | Test 4) Contains Items: Passed
  |
  | Ran 4/4 Requested Tests
  | Passed 4/4 Tests
  | Total Score: 0.5/0.5
  `----

  With the starter code, you should be able to compile and run the tests. Most
  will fail but runnable tests are the first step to victory.
  ,----
  | > make
  | gcc -Wall -Werror -g  -c list_main.c
  | gcc -Wall -Werror -g  -c list_funcs.c
  | gcc -Wall -Werror -g  -o list_main list_main.o list_funcs.o list.h
  |
  | > make test-code
  | == list_main
  | == Running 4/4 tests
  | Test 1) list_main: Print then Exit: Passed
  | Test 2) list_main: Insert 3 and Print: Failed -> Results in test_results/list_main-2-results.tmp
  | Test 3) Get Command: Segmentation Fault -> Results in test_results/list_main-3-results.tmp
  | Test 4) Contains Items: Failed -> Results in test_results/list_main-4-results.tmp
  |
  | Ran 4/4 Requested Tests
  | Passed 1/4 Tests
  | Total Score: 0.125/0.5
  `----
